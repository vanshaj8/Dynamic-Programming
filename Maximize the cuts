Recursion+ memosiation

class Solution
{
    public:
     int dp[100004];
    int func(int n,int x,int y,int z)
    {
       if(n==0) return 0;
       
       if(dp[n]!=-1) return dp[n];
       int op1=INT_MIN,op2=INT_MIN,op3=INT_MIN;
       if(n>=x) op1=func(n-x,x,y,z);
       if(n>=y) op2=func(n-y,x,y,z);
       if(n>=z) op3=func(n-z,x,y,z);
       
       return dp[n]=1+max(op1,max(op2,op3));
    }
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        memset(dp,-1,sizeof(dp));
        int a=func(n,x,y,z);
        if(a<0) return 0;
        
        return a;
    }
};



Solving using Unbounded Knapsack



class Solution
{
    public:
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int m, int x, int y, int z)
    {
        int arr[3]={x,y,z};
        int dp[4][m+1];
        
        for(int i=0;i<=3;i++)
        {
            for(int j=0;j<=m;j++)
            {
                if(i==0) dp[i][j]=INT_MIN;
                if(j==0) dp[i][j]=0;
            }
        }
        
        for(int i=1;i<=3;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j]=max(dp[i-1][j],1+dp[i][j-arr[i-1]]);
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        
        return dp[3][m]<0 ? 0:dp[3][m];
    }
};
