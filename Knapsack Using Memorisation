#include <iostream>
#include<bits/stdc++.h>
#include<math.h>
using namespace std;
/*
int max(int a, int b) 
{  
    return (a > b) ? a : b;  
} 

*/

int knapsack(int val[],int wt[],int W,int n)
{
  int dp[n+1][W+1];
  
  for(int i=0;i<=n;i++)
  {
  	for(int j=0;j<=W;j++)
  	{
  		dp[i][j]=-1;
	}
  }
  
  // Base Conditon
  if(n==0||W==0)
  {
  	return 0;
  }
  
  if(dp[n][W]!=-1)
  {
  	return dp[n][W];
  }
  
  // Choice Diagram Conditon
  
  if(wt[n-1]<=W)
  {
  	
  	return dp[n][W]=max(val[n-1]+knapsack(val,wt,W-wt[n-1],n-1), knapsack(val,wt,W,n-1));
  }
  else if(wt[n-1]>W)
  {
  	return dp[n][W]=knapsack(val,wt,W,n-1);
  }
  
  
  return dp[n][W];
}


int main()
{
  int val[] = { 60, 100, 120 }; 
  int wt[] = { 10, 20, 30 }; 
  int W = 50;
  int n=sizeof(val)/sizeof(val[0]);

  cout<<knapsack(val,wt,W,n);
}
