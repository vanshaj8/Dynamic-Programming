
int countSubsetSum(int B, int arr[],int n) 
{ 
    int i, b; 
    int dp[n + 1][B + 1]; 
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=1;
    }
    for (int b = 1; b <= B; b++) 
    {
        dp[0][b] = 0; 
    }    
    // Build table K[][] in bottom up manner 
    for (i = 1; i <= n; i++) 
    { 
        for (b = 1; b <= B; b++) 
        { 
            if (arr[i - 1] <= b) 
                dp[i][b] =dp[i - 1][b - arr[i - 1]] + dp[i - 1][b]; 
            else
                dp[i][b] = dp[i - 1][b]; 
        } 
    } 

    return dp[n][B]; 
} 

int minSubDiff(int arr[],int n,int W)
{
  bool dp[n+1][W+1];
  // Initialising the 0 rows and Columns wih true and false
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<W;j++)
    {
      if(i==0)
      {
        dp[0][j]=false;
      }
      if(j==0)
      {
        dp[i][0]=true;
      }
    }
  }
  // Now putting true of false in others

  for(int i=1;i<=n;i++)
  {
    for(int j=1;j<=W;j++)
    {
      if(arr[i-1]<=j)
      {
       dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
      }
      else
      {
        dp[i][j]=dp[i-1][j];
      }
    }
  }


  // Checking the minmum sum

   int diff=0;
  for(int j=W/2;j>=0;j--)
  {
    if(dp[n][j]==true)
    {
      diff=W-2*j;
      break;
    }
    
  }

 int sum;
 sum=diff+W/2;

return countSubsetSum(sum,arr,n);
}


int main()
{
  int arr[]={1,2,7};
  int n=sizeof(arr)/sizeof(arr[0]);
  int range=0;
  for(int i=0;i<n;i++)
  {
    range=range+arr[i];
  }

  cout<< minSubDiff(arr,n,range);

}
